#include "all.h"

int     player_state;

#if 3
//******************************************************************************
// TODO:03 OBJ2D型の変数playerを宣言
//------------------------------------------------------------------------------
/*
課題）
    下記でOBJ2D型の変数playerを宣言しましょう。
*/
//******************************************************************************
#endif
//TODO_03


Sprite* sprPlayer;

//--------------------------------------
//  プレイヤーの初期設定
//--------------------------------------
void player_init()
{
#if 5
//******************************************************************************
// TODO:05 プレイヤーの初期設定
//------------------------------------------------------------------------------
/*
課題）
    player_stateに0を設定しましょう。
*/
//******************************************************************************
#endif
    //TODO_05
    player_state = 0;

}

//--------------------------------------
//  プレイヤーの終了処理
//--------------------------------------
void player_deinit()
{
#if 6
//******************************************************************************
// TODO:06 プレイヤーの終了処理
//------------------------------------------------------------------------------
/*
課題）
    下記でsprPlayerを破棄しましょう。
*/
//******************************************************************************
#endif
    //TODO_06
    safe_delete(sprPlayer);
}

//--------------------------------------
//  プレイヤーの更新処理
//--------------------------------------
void player_update()
{
    switch (player_state)
    {
    case 0:
        sprPlayer = sprite_load(L"./Data/Images/spaceship.png");
        //////// 初期設定 ////////
#if 7
//******************************************************************************
// TODO:07 プレイヤーの画像を読み込む
//------------------------------------------------------------------------------
/*
課題）
    下記でplayerの画像を読み込みましょう。

    変数名：sprPlayer
    画像名：stickman.png
*/
//******************************************************************************
#endif
        //TODO_07


        ++player_state;
        /*fallthrough*/

    case 1:


        //TODO_08


        ++player_state;
        /*fallthrough*/

    case 2:
        //////// 通常時 ////////
#if 16
//******************************************************************************
// TODO:16 Y方向・X方向の移動関数を呼ぶ
//------------------------------------------------------------------------------
/*
課題）
    下記でplayer_moveY関数と、player_moveX関数を呼びましょう。（Y → Xの順番で）

解説）
    ここはプレイヤーの更新関数です。
    Y軸方向（縦方向）の移動を制御するためのplayer_moveY関数と、X軸方向（横方向）
    の移動を制御するためのplayer_moveX関数の枠組みが用意されています。まずは、
    その関数を呼んでおきましょう。

    今回のプログラムではplayer_moveYとplayer_moveXで、プレイヤーがこの瞬間に、
    どれだけ移動するか（そのフレームでの速度）を算出します。その後、位置に速度を
    足し、地面とのあたり判定や、エリア外に出ないかチェックなどを行っていきます。
*/
//******************************************************************************
#endif
        //TODO_16 Y方向・X方向の移動関数を呼び、1フレームあたりの速度を求める


        //予備課題：ジャンプ処理


#if 18
//******************************************************************************
// TODO:18 位置に速度を足す
//------------------------------------------------------------------------------
/*
課題）
    下記でプレイヤーの位置に速度を足しましょう。

解説）
    posもspeedもVECTOR2型です。VECTOR2型同士そのまま足し算などができます。
    （xにxを、yにyを足しても同じですが、分ける必要はありません）
*/
//******************************************************************************
#endif
        //TODO_18 位置に速度を足す


#if 20
//******************************************************************************
// TODO:20 地面とのあたり判定（仮）
//------------------------------------------------------------------------------
/*
課題）
    プレイヤーのy座標がGROUND_Yを超えている場合、プレイヤーのy座標にGROUND_Yを
    代入し、超えないようにしましょう。また、その際にY方向の速度に0.0fを代入して
    おきましょう。
*/
//******************************************************************************
#endif
        //TODO_20 地面とのあたり判定（仮）


#if 24
//******************************************************************************
// TODO:24 プレイヤーの左右のエリアチェック
//------------------------------------------------------------------------------
/*
課題）
    プレイヤーが画面からはみ出ないようにしましょう。

    プレイヤーのX座標の最小値：PLAYER_TEX_W * 0.5f
    プレイヤーのX座標の最大値：SCREEN_W - PLAYER_TEX_W * 0.5f

    ※左右の限界値をplayer.hに、定数として定義してみましょう。
*/
//******************************************************************************
#endif
        //TODO_24 プレイヤーの左右のエリアチェック


        break;
    }
}

void player_render()
{
#if 9
//******************************************************************************
// TODO:09 プレイヤーの描画
//------------------------------------------------------------------------------
/*
課題）
    下記でsprPlayerを描画しましょう。

解説）
    他に必要なパラメータは基本的にOBJ2D構造体のメンバ変数になっています。OBJ2D型の
    playerのメンバ変数を記述していきましょう。角度のみ、ToRadian(0)でOKです。
    色はVECTOR4型です。VECTOR4型の中身はx, y, z, wです。色はr, g, b, aなので、
    その順番で対応しています。（例えばrはxで、aはwで表すなど）
*/
//******************************************************************************
#endif
    //TODO_09
    sprite_render(sprPlayer,
        300, 100, //pos
        0.5, 0.5, //scale
        0, 0, //texture pos
        500, 500,//texture width and height
        0, 0, ToRadian(90));

}

void player_moveY()
{
#if 17
//******************************************************************************
// TODO:17 Y方向の移動
//------------------------------------------------------------------------------
/*
課題）
    プレイヤーの速度のy成分に、重力を足しましょう。

解説）
    プレイヤーの移動用の関数を実装していきます。最初プレイヤーが画面の中央に出現
    しますが、重力に引かれて落下して地面に落ちるようにします。
    これは等加速度直線運動、特にこの場合は自由落下運動と呼ばれています。

    ここでは、速度に加速度を足せばよいだけなのです。[プリント参照]

    重力加速度には、先ほど設問14番で設定したGRAVITYを使います。
    （現実の重力加速度は9.8[m/s^2]とかですが、ここでは9.8だと速すぎるため、
    キャラクターや画面の大きさに合わせた数値にしています。）
*/
//******************************************************************************
#endif
    //TODO_17

}

void player_moveX()
{
#if 22
//******************************************************************************
// TODO:22 X方向の移動
//------------------------------------------------------------------------------
/*
課題）
    プレイヤーを横方向に移動させます。
    今回は、下記の手順をC言語のソースコードに変換しながら、じっくり理解していきましょう。

手順）
    もし右キーが押されていて、かつ左キーが押されていない場合
        プレイヤーのX方向の速度に加速度（加速用）を足す（設問の21番で定義したもの）
    そうではなく、もし左キーが押されていて、かつ右キーが押されていない場合
        プレイヤーのX方向の速度から加速度（加速用）を引く
    そうではない場合
        もしプレイヤーの速度xが正の場合
            プレイヤーの速度xから加速度（減速用）を引く
            もしプレイヤーの速度xが負の場合
                プレイヤーの速度xに0.0fを設定する
        もしプレイヤーの速度xが負の場合
            プレイヤーの速度xから加速度（減速用）を足す
            もしプレイヤーの速度xが正の場合
                プレイヤーの速度xに0.0fを設定する
    プレイヤーの速度xが正、負ともに最大値を超えないようにする。
*/
//******************************************************************************
#endif
    //TODO_22 X方向の移動


#if 23
//******************************************************************************
// TODO:23 プレイヤーに左右を向かせる
//------------------------------------------------------------------------------
/*
課題）
    上記設問22番の中で、右キーが押されているところでプレイヤーのスケールxに1.0fを設定
    しなさい。また、左キーが押されているところでプレイヤーのスケールxに-1.0fを設定しな
    さい。
*/
//******************************************************************************
#endif
}
